Напиши реалізацію для int add(int a, int b); яка буде в подальшому використовуватись для unit-tests

Ось стандартна реалізація функції add для math_operations.cpp:
int add(int a, int b) {
    return a + b;
}

Пояснення:
Функція просто повертає суму двох цілих чисел. Така реалізація коректно працює для unit-тестів, оскільки не містить побічних ефектів і завжди повертає очікуваний результат.

Тепер реалізуй тести для цього, записавши їх у файл unti_tests.cpp.Використай краще Google Test як фреймворк

Ось приклад unit-тестів для функції add у файлі unit_tests.cpp з використанням Google Test:

#include <gtest/gtest.h>
#include "../math_operations.h"

TEST(AddFunctionTests, PositiveNumbers) {
    EXPECT_EQ(add(1, 2), 3);
    EXPECT_EQ(add(100, 200), 300);
}

TEST(AddFunctionTests, NegativeNumbers) {
    EXPECT_EQ(add(-1, -2), -3);
    EXPECT_EQ(add(-100, -200), -300);
}

TEST(AddFunctionTests, MixedSignNumbers) {
    EXPECT_EQ(add(-1, 2), 1);
    EXPECT_EQ(add(1, -2), -1);
}

TEST(AddFunctionTests, Zero) {
    EXPECT_EQ(add(0, 0), 0);
    EXPECT_EQ(add(0, 5), 5);
    EXPECT_EQ(add(5, 0), 5);
}

Що було зроблено:
•	Підключено Google Test та math_operations.h.
•	Додано чотири групи тестів для різних випадків використання функції add.
Примітка:
Для запуску тестів потрібно налаштувати Google Test у вашому CMakeLists.txt. Якщо потрібна допомога з інтеграцією Google Test у CMake, повідомте про це.

Так, налаштуй CMake для відповідної інтеграції

Ось як інтегрувати Google Test у ваш CMakeLists.txt для проекту з Ninja та C++17:

cmake_minimum_required(VERSION 3.10)

project(MyProject LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Додаємо головний виконуваний файл
add_executable(${PROJECT_NAME} main.cpp math_operations.cpp)

# GoogleTest: автоматичне завантаження та підключення
include(FetchContent)
FetchContent_Declare(
    googletest
    URL https://github.com/google/googletest/archive/refs/heads/main.zip
)
# Для Windows: вимкнути встановлення тестів GoogleTest
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(googletest)

enable_testing()

# Додаємо тестовий виконуваний файл
add_executable(unit_tests
    tests/unit_tests.cpp
    math_operations.cpp
)

target_link_libraries(unit_tests
    gtest_main
)

include(GoogleTest)
gtest_discover_tests(unit_tests)

Що було зроблено:
•	Додається Google Test через FetchContent (автоматичне завантаження).
•	Створюється тестовий виконуваний файл unit_tests.
•	math_operations.cpp додається до тестів для лінкування реалізації.
•	Підключається бібліотека gtest_main.
•	Включається автоматичне виявлення тестів.
Тепер можна запускати тести через CTest або з Visual Studio 

Які команди треба прописати щоб провести тестування unit_tests.cpp

Щоб провести тестування unit_tests.cpp у вашому проекті з CMake та Ninja, виконайте такі команди у терміналі з кореня проекту:
1.	Створіть директорію для білду (якщо ще не створена):

mkdir build

2.	Запустіть CMake з генератором Ninja:

cmake -S . -B build -G Ninja

3.	Перейдіть у директорію білду:

ninja -C build

ctest --test-dir build

Пояснення:
•	cmake -S . -B build -G Ninja — конфігурує проект для Ninja.
•	ninja -C build — компілює всі цілі, включаючи unit_tests.
•	ctest --test-dir build — запускає всі знайдені CMake тести.
