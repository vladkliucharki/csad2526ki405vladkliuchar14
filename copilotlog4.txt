Write me an implementation for the ci.bat that performs the following steps: Creating the build directory (mkdir build). Changing to the directory (cd build). Configuring the project using CMake (cmake ..). Building the project (cmake --build .).

Here is a simple implementation for ci.bat that performs all the requested steps:

@echo off
REM Create build directory if it doesn't exist
if not exist build (
    mkdir build
)

REM Change to build directory
cd build

REM Configure the project
cmake ..

REM Build the project
cmake --build .

Explanation:
•	Checks if the build directory exists and creates it if not.
•	Changes into the build directory.
•	Runs CMake to configure the project.
•	Builds the project using CMake's build command.
This script is ready to use for your CMake + Ninja setup.

Create a step that runs tests using CTest (part of CMake), and have this script run on all three OCs

Here’s an updated ci.bat that builds your project and runs tests using CTest, with cross-platform support for Windows, macOS, and Linux:

@echo off
REM Detect OS
setlocal

REM Create build directory if it doesn't exist
if not exist build (
    mkdir build
)

cd build

REM Configure the project
cmake ..

REM Build the project
cmake --build .

REM Run tests using CTest
if "%OS%"=="Windows_NT" (
    ctest --output-on-failure
) else (
    ctest --output-on-failure
)

endlocal

Notes:
•	This script works on Windows (.bat files are for Windows).
•	On macOS/Linux, use a shell script (ci.sh) instead, as .bat files are not natively supported.
•	The ctest --output-on-failure command is the same for all platforms.
•	If you want a truly cross-platform script, consider using CMake’s scripting or a shell script (.sh) for macOS/Linux.

CMake Warning (dev) at C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/share/cmake-3.30/Modules/FetchContent.cmake:1373 (message): The DOWNLOAD_EXTRACT_TIMESTAMP option was not given and policy CMP0135 is not set.  The policy's OLD behavior will be used.  When using a URL download, the timestamps of extracted files should preferably be that of the time of extraction, otherwise code that depends on the extracted contents might not be rebuilt if the URL changes.  The OLD behavior preserves the timestamps from the archive instead, but this is usually not what you want.  Update your project to the NEW behavior or specify the DOWNLOAD_EXTRACT_TIMESTAMP option with a value of true to avoid this robustness issue. Call Stack (most recent call first): CMakeLists.txt:13 (FetchContent_Declare) This warning is for project developers.  Use -Wno-dev to suppress it.

To resolve this CMake warning, you should explicitly set the DOWNLOAD_EXTRACT_TIMESTAMP option to true in your FetchContent_Declare for GoogleTest in your CMakeLists.txt. This will ensure the extracted files get the timestamp of extraction, which is the recommended (NEW) behavior.
How to fix:
Update your FetchContent_Declare section as follows:

FetchContent_Declare(
    googletest
    URL https://github.com/google/googletest/archive/refs/heads/main.zip
    DOWNLOAD_EXTRACT_TIMESTAMP true
)

What changed:
•	Added DOWNLOAD_EXTRACT_TIMESTAMP true to the FetchContent_Declare for GoogleTest.
Reason:
This removes the warning and ensures that if the URL changes, the extracted files will have new timestamps, triggering a proper rebuild.
No changes are needed in your ci.bat script. Only the CMakeLists.txt needs this update.
